syntax = "proto3";

package iCubInterfaceMessages;

// response status
enum Status {
    UNKNOWN = 0;
    SUCCESS = 1;
    ERROR = 2;
}

message DoubleVector {
    repeated double values = 1;
}

message TestRequest {
}

message TestResponse {
    Status status = 2;
}

message ImageRequest {
}

message ImageResponse {
    Status status = 1;
    // flattened images (consider precision?)
    repeated double imageL = 2;
    repeated double imageR = 3;
}

message RgbImageResponse {
    Status status = 1;
    // flattened images (consider precision?)
    repeated int32 imageL = 2;
    repeated int32 imageR = 3;
}

message SingleJointRequest {
    // selected joint
    int32 joint = 1;
    // selected joint
    bool encode = 2;
}

message SingleJointResponse {
    Status status = 1;
    repeated double angle = 2;
}

message MultiJointRequest {
    // selected joint
    repeated int32 joint = 1;
    // selected joint
    bool encode = 2;
}

message MultiJointResponse {
    Status status = 1;
    repeated double angle = 2;
}

message AllJointsRequest {
    // selected joint
    bool encode = 1;
}

message AllJointsResponse {
    Status status = 1;
    repeated double angle = 2;
}

message SingleTargetRequest {
    // selected joint
    int32 joint = 2;
}

message SingleTargetResponse {
    Status status = 1;
    double angle = 2;
}

message MultiTargetRequest {
}

message MultiTargetResponse {
    Status status = 1;
    repeated double angle = 2;
}

message AllTargetRequest {
}

message AllTargetResponse {
    Status status = 1;
    repeated double angle = 2;
}

message SingleTargetEncodedRequest {
    // selected joint
    int32 joint = 1;
}

message SingleTargetEncodedResponse {
    Status status = 1;
    repeated double angle = 2;
}

message MultiTargetEncodedRequest {
}

message MultiTargetEncodedResponse {
    Status status = 1;
    repeated double angle = 2;
}

message AllTargetEncodedRequest {
}

message AllTargetEncodedResponse {
    Status status = 1;
    repeated double angle = 2;
}

message SkinRequest {
    // selected skin section
    string skin_section = 1;
}

message SkinResponse {
    Status status = 1;
    repeated double sensor_data = 2;
}

message SkinArmRequest {
}

message SkinForearmRequest {
}

message SkinHandRequest {
}

message KinematicRequest {
}

message KinematicResponse {
    Status status = 1;
    repeated double position = 2;
}


service ProvideInput {
    // provide Camera images
    rpc ReadTest (TestRequest) returns (TestResponse) {}
    // provide Camera images
    rpc ReadImage (ImageRequest) returns (ImageResponse) {}
    // provide Camera images
    rpc RetrieveImage (ImageRequest) returns (RgbImageResponse) {}
    // provide single joint angle
    rpc ReadSingleJoint (SingleJointRequest) returns (SingleJointResponse) {}
    // provide multi joint angles
    rpc ReadMultiJoints (MultiJointRequest) returns (MultiJointResponse) {}
    // provide all joint angles
    rpc ReadAllJoints (AllJointsRequest) returns (AllJointsResponse) {}
    // provide skin sensor data
    rpc ReadSkin (SkinRequest) returns (SkinResponse) {}
    // provide skin sensor data
    rpc ReadSkinArm (SkinArmRequest) returns (SkinResponse) {}
    // provide skin sensor data
    rpc ReadSkinForearm (SkinForearmRequest) returns (SkinResponse) {}
    // provide skin sensor data
    rpc ReadSkinHand (SkinHandRequest) returns (SkinResponse) {}
    // provide cartesian position of the iCub hand
    rpc ReadKinematicHand (KinematicRequest) returns (KinematicResponse) {}
}

service WriteOutput {
    // provide single joint angle
    rpc WriteSingleTarget (SingleTargetRequest) returns (SingleTargetResponse) {}
    // provide single Target angle
    rpc WriteSingleTargetEncoded (SingleTargetEncodedRequest) returns (SingleTargetEncodedResponse) {}
    // provide multiple Target angles
    rpc WriteMultiTargets (MultiTargetRequest) returns (MultiTargetResponse) {}
    // provide all Target angles
    rpc WriteMultiTargetsEncoded (MultiTargetEncodedRequest) returns (MultiTargetEncodedResponse) {}
    // provide all Target angles
    rpc WriteAllTargets (AllTargetRequest) returns (AllTargetResponse) {}
    // provide all Target angles
    rpc WriteAllTargetsEncoded (AllTargetEncodedRequest) returns (AllTargetEncodedResponse) {}
}