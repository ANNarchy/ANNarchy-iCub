from typing import Any

class PyJointWriter:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def close(self, ANNiCub_wrapperiCub) -> Any: ...
    def decode(self, position_pop, intjoint) -> Any: ...
    def get_joint_count(self) -> Any: ...
    def get_joint_limits(self) -> Any: ...
    def get_joint_limits_max(self) -> Any: ...
    def get_joint_limits_min(self) -> Any: ...
    def get_joints_deg_res(self) -> Any: ...
    def get_neurons_per_joint(self) -> Any: ...
    def init(self, ANNiCub_wrapperiCub, unicodename, unicodepart, unsignedintn_pop, doubledegr_per_neuron = ..., doublespeed = ..., unicodeini_path = ...) -> Any: ...
    def init_grpc(self, ANNiCub_wrapperiCub, unicodename, unicodepart, unsignedintn_pop, joints, unicodemode, blocking = ..., doubledegr_per_neuron = ..., doublespeed = ..., unicodeini_path = ..., unicodeip_address = ..., unsignedintport = ...) -> Any: ...
    def retrieve_ANNarchy_input_all(self) -> Any: ...
    def retrieve_ANNarchy_input_all_enc(self) -> Any: ...
    def retrieve_ANNarchy_input_multi(self) -> Any: ...
    def retrieve_ANNarchy_input_multi_enc(self) -> Any: ...
    def retrieve_ANNarchy_input_single(self) -> Any: ...
    def retrieve_ANNarchy_input_single_enc(self) -> Any: ...
    def set_joint_acceleration(self, doubleacc, intjoint = ...) -> Any: ...
    def set_joint_controlmode(self, unicodecontrol_mode, intjoint = ...) -> Any: ...
    def set_joint_velocity(self, doublespeed, intjoint = ...) -> Any: ...
    def write_ANNarchy_input_all(self) -> Any: ...
    def write_ANNarchy_input_all_enc(self) -> Any: ...
    def write_ANNarchy_input_multi(self) -> Any: ...
    def write_ANNarchy_input_multi_enc(self) -> Any: ...
    def write_ANNarchy_input_single(self) -> Any: ...
    def write_ANNarchy_input_single_enc(self) -> Any: ...
    def write_double_all(self, position, unicodemode, blocking = ...) -> Any: ...
    def write_double_multiple(self, position, joints, unicodemode, blocking = ...) -> Any: ...
    def write_double_one(self, position, intjoint, unicodemode, blocking = ...) -> Any: ...
    def write_pop_all(self, position_pops, unicodemode, blocking = ...) -> Any: ...
    def write_pop_multiple(self, position_pops, joints, unicodemode, blocking = ...) -> Any: ...
    def write_pop_one(self, position_pop, intjoint, unicodemode, blocking = ...) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...
