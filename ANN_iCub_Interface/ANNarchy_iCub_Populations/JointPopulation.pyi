from ANNarchy.core.SpecificPopulation import SpecificPopulation
from _typeshed import Incomplete

class JointControl(SpecificPopulation):
    name: Incomplete
    def __init__(self, geometry: Incomplete | None = ..., neuron=..., ip_address: str = ..., port: int = ..., copied: bool = ..., name: Incomplete | None = ...) -> None: ...
    @property
    def ip_address(self): ...
    @ip_address.setter
    def ip_address(self, value) -> None: ...
    @property
    def port(self): ...
    @port.setter
    def port(self, value) -> None: ...
    def connect(self) -> None: ...

class JointReadout(SpecificPopulation):
    name: Incomplete
    def __init__(self, geometry: Incomplete | None = ..., joints: Incomplete | None = ..., encoded: bool = ..., ip_address: str = ..., port: int = ..., copied: bool = ..., name: Incomplete | None = ...) -> None: ...
    @property
    def ip_address(self): ...
    @ip_address.setter
    def ip_address(self, value) -> None: ...
    @property
    def port(self): ...
    @port.setter
    def port(self, value) -> None: ...
    @property
    def joints(self): ...
    @joints.setter
    def joints(self, value) -> None: ...
    @property
    def encoded(self): ...
    @encoded.setter
    def encoded(self, value) -> None: ...
    def connect(self) -> None: ...
